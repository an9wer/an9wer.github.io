#!/usr/bin/env bash

set -e

PATH=venv/bin:$PATH

RST_DIR=$(realpath "$(dirname ${BASH_SOURCE[0]})/reStructuredText")
DOT_DIR=$(realpath "$(dirname ${BASH_SOURCE[0]})/graphviz")
OUT_DIR=$(realpath "$(dirname ${BASH_SOURCE[0]})")

usage() {
  cat <<EOF
build [<rst> ...] [<dot> ...]
EOF
}

build_rst() {
  local rst html category
  for rst in "$@"; do
    rst=$(realpath "$rst")
    if [[ ! -f $rst ]]; then
      echo "Unexisted file '$rst'."
      continue
    fi
    if [[ ! $rst =~ \.rst$ ]]; then
      echo "Unkonwn filetype '$rst'."
      continue
    fi

    # Blog
    html=$(sed -nE "s@.*(20[1-9][0-9]/[01][0-9]/[0-3][0-9]_[^/]+)\\.rst\$@$OUT_DIR/\1.html@p" <(echo "$rst"))
    category=blog

    # Notes
    if [[ -z $html ]]; then
      # Skip `notes/ns` directory
      if grep -Eq '.*/notes/ns/[^/]+\.rst$' <(echo "$rst"); then
        continue
      fi
      html=$(sed -nE "s@.*/(notes/.+)\\.rst\$@$OUT_DIR/\1.html@p" <(echo "$rst"))
      category=notes
    fi

    # Index
    if [[ -z $html ]]; then
      html=$(sed -nE "s@.*/([^/]+)\.rst\$@$OUT_DIR/\1.html@p" <(echo "$rst"))
      if [[ $html =~ /blog.html$ ]]; then
        category=blog
      elif [[ $html =~ /notes.html$ ]]; then
        category=notes
      elif [[ $html =~ /moments.html$ ]]; then
        category=moments
      elif [[ $html =~ /tools.html$ ]]; then
        category=tools
      else
        echo "Unknown file '$rst'."
        continue
      fi
    fi

    # Missing
    if [[ -z $html ]]; then
      echo "Unknown file '$rst'."
      continue
    fi

    mkdir -p "$(dirname "$html")"
    #  Only rebuild when html doesn't exist, mtime of either rst or template.html is updated, or when forced to rebuild
    if [[ $force == true ]] || [[ ! -f $html ]] ||
        ([[ -f $html ]] && (( $(stat -c "%Y" "$html") <= $(stat -c "%Y" "$rst") ))) ||
        ([[ -f $html ]] && (( $(stat -c "%Y" "$html") <= $(stat -c "%Y" "$OUT_DIR/template.html") ))); then
      rst2html5.py \
        --strict \
        --link-stylesheet \
        --initial-header-level 2 \
        --stylesheet "/statics/css/style.css" \
        --template <(sed -E "s/(id=\"$category\")/\1 class=\"current\"/" "$OUT_DIR/template.html") \
        "$rst" "$html"
      echo -e "'$rst'\n->\t'$html'"
    fi
  done
}

build_dot() {
  local dot jpeg
  for dot in "$@"; do
    dot=$(realpath "$dot")
    if [[ ! -f $dot ]]; then
      echo "Unexisted file '$dot'."
      continue
    fi
    if [[ ! $dot =~ \.dot$ ]]; then
      echo "Unkonwn filetype '$dot'."
      continue
    fi

    jpeg=$(sed -nE "s@.*/graphviz/(.+)\\.dot\$@$OUT_DIR/code/\1.jpg@p" <(echo "$dot"))
    if [[ -z $jpeg ]]; then
      echo "Unfound '$dot' in 'graphviz' directory."
      continue
    fi

    mkdir -p "$(dirname "$jpeg")"
    #  Only build when jpeg doesn't exist and mtime of dot is updated
    if [[ ! -f $jpeg ]] ||
        ([[ -f $jpeg ]] && (( $(stat -c "%Y" "$jpeg") <= $(stat -c "%Y" "$dot") ))); then
      dot -Tjpeg "$dot" -o "$jpeg"
      echo -e "'$dot'\n->\t'$jpeg'"
    fi
  done
}

build_rss() {
  if [[ ! -f blog.rss ]] ||
      ([[ -f blog.rss ]] && (( $(stat -c "%Y" blog.rss ) <= $(stat -c "%Y" reStructuredText/blog.rst) ))); then
    { cat <<EOF
<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>an9wer's blog</title>
  <link>https://an9wer.github.io/blog.html</link>
  <description>Website of an9wer's blog</description>
  <webMaster>an9wer@gmail.com</webMaster>
  <pubDate>$(date -u -R)</pubDate>
  <lastBuildDate>$(date -u -R)</lastBuildDate>
  <category>blog</category>
  <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
  <ttl>60</ttl>
EOF
    perl -lane '
if (/`(.*) <(.*)>`_/) {
  print "  <item>";
  print "    <title>$1</title>";
  print "    <link>https://an9wer.github.io/$2</link>";
  print "  </item>";
}
' reStructuredText/blog.rst

    cat <<EOF
</channel>

</rss> 
EOF
    } > blog.rss

    echo -e "'reStructuredText/blog.rst'\n->\t'blog.rss'"
  fi
}

build_all() {
  local IFS=$'\n'
  build_rst $(find "$RST_DIR" -type f -name "*.rst")
  #build_dot $(find "$DOT_DIR" -type f -name "*.dot")
  build_rss
}

# Main
if [[ $1 =~ ^-f$|^--force$ ]]; then
  force=true
  shift
fi
if [[ -z $@ ]]; then
  build_all
else
  while (( ${#@} > 0 )) ; do
    case $1 in
      *.rst ) build_rst "$1" ;;
      *.dot ) build_dot "$1" ;;
      *     ) usage ;;
    esac
    shift
  done
fi
